# -*- coding: utf-8 -*-
"""pytorch7-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ISFGNb0WRmSUvuzAr8aO29cfNI21Qkgs

# Analysis of Neural Network

Most of the time we care about 4 trends:
- Out of sample loss
- Out of sample accuracy 
- In sample loss
- In sample accuracy
"""

import os
import cv2
import numpy as np
from tqdm import tqdm
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

# !unzip "/content/drive/My Drive/PetImages.zip"

# Load the Drive helper and mount
from google.colab import drive
# This will prompt for authorization.
drive.mount('/content/drive')
!ls "/content/drive/My Drive"
!unzip -uq "/content/drive/My Drive/PetImages.zip"


REBUILD_DATA = True # set to true to one once, then back to false unless you want to change something in your training data.

class DogsVSCats():
  IMG_SIZE = 50
  CATS = "PetImages/Cat" #directory
  DOGS = "PetImages/Dog" 
  TESTING = "PetImages/Testing"
  LABELS = {CATS: 0, DOGS: 1}
  training_data = []
  catcount = 0
  dogcount = 0

  def make_training_data(self): #self-explanatory
    
    # iterating over directories
    for label in self.LABELS:
      # print(label)
      # iterate all the images in the directory
      # tqdm is progress bar
      for f in tqdm(os.listdir(label)):
        
        if "jpg" in f:

          try:
            path =os.path.join(label, f)
            img = cv2.imread(path, cv2.IMREAD_GRAYSCALE)
            img = cv2.resize(img, (self.IMG_SIZE, self.IMG_SIZE))
            # Use one hot vectors
            self.training_data.append([np.array(img), np.eye(2)[self.LABELS[label]]]) 

            if label == self.CATS:
              self.catcount += 1
            elif label == self.DOGS:
              self.dogcount += 1
            # should have almost similar no of samples - otherwise unbalanced
          
          except Exception as e:
            pass
            # print(str(e))

    np.random.shuffle(self.training_data)
    np.save("training_data.npy", self.training_data)
    print("\nCats:", self.catcount)
    print("Dogs:", self.dogcount)



class Net(nn.Module):
    def __init__(self):
        super().__init__() # just run the init of parent class (nn.Module)
        self.conv1 = nn.Conv2d(1, 32, 5) # input is 1 image, 32 output channels, 5x5 kernel / window
        self.conv2 = nn.Conv2d(32, 64, 5) # input is 32, bc the first layer output 32. Then we say the output will be 64 channels, 5x5 kernel / window
        self.conv3 = nn.Conv2d(64, 128, 5)

        x = torch.randn(50,50).view(-1,1,50,50)
        self._to_linear = None
        self.convs(x)

        self.fc1 = nn.Linear(self._to_linear, 512) #flattening.
        self.fc2 = nn.Linear(512, 2) # 512 in, 2 out bc we're doing 2 classes (dog vs cat).

    def convs(self, x):
        # max pooling over 2x2
        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv2(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv3(x)), (2, 2))

        if self._to_linear is None:
            self._to_linear = x[0].shape[0]*x[0].shape[1]*x[0].shape[2]
        return x

    def forward(self, x):
        x = self.convs(x)
        x = x.view(-1, self._to_linear)  # .view is reshape ... this flattens X before 
        x = F.relu(self.fc1(x))
        x = self.fc2(x) # bc this is our output layer. No activation here.
        return F.softmax(x, dim=1)

if torch.cuda.is_available():
    device = torch.device("cuda:0")  # you can continue going on here, like cuda:1 cuda:2....etc. 
    print("\nRunning on the GPU")
else:
    device = torch.device("cpu")
    print("\nRunning on the CPU")

net = Net().to(device)
# print(net)

if REBUILD_DATA:
    dogsvcats = DogsVSCats()
    dogsvcats.make_training_data()

training_data = np.load("training_data.npy", allow_pickle=True)
print(len(training_data))

optimizer = optim.Adam(net.parameters(), lr=0.001)
loss_function = nn.MSELoss()

X = torch.Tensor([i[0] for i in training_data]).view(-1,50,50)
X = X/255.0
y = torch.Tensor([i[1] for i in training_data])

VAL_PCT = 0.1  # lets reserve 10% of our data for validation
val_size = int(len(X)*VAL_PCT)
print(val_size)

train_X = X[:-val_size]
train_y = y[:-val_size]

test_X = X[-val_size:]
test_y = y[-val_size:]

print(len(train_X))
print(len(test_X))

BATCH_SIZE = 100
EPOCHS = 3


def train(net):
  for epoch in range(EPOCHS):
      for i in tqdm(range(0, len(train_X), BATCH_SIZE)): # from 0, to the len of x, stepping BATCH_SIZE at a time. [:50] ..for now just to dev
          #print(f"{i}:{i+BATCH_SIZE}")
          batch_X = train_X[i:i+BATCH_SIZE].view(-1, 1, 50, 50)
          batch_y = train_y[i:i+BATCH_SIZE]

          batch_X, batch_y = batch_X.to(device), batch_y.to(device)

          net.zero_grad()
          outputs = net(batch_X)
          loss = loss_function(outputs, batch_y)
          loss.backward()
          optimizer.step()    # Does the update

      print(f"Epoch: {epoch}. Loss: {loss}")


def test(net):
  correct = 0
  total = 0
  with torch.no_grad():
      for i in tqdm(range(len(test_X))):
          real_class = torch.argmax(test_y[i])
          net_out = net(test_X[i].view(-1, 1, 50, 50))[0]  # returns a list, 
          predicted_class = torch.argmax(net_out)

          if predicted_class == real_class:
              correct += 1
          total += 1

  print("Accuracy: ", round(correct/total, 3))

# net = net.to(device)

# def train(net):
#     BATCH_SIZE = 100
#     EPOCHS = 3
#     for epoch in range(EPOCHS):
#         for i in tqdm(range(0, len(train_X), BATCH_SIZE)):
#             batch_X = train_X[i:i+BATCH_SIZE].view(-1,1,50,50)
#             batch_y = train_y[i:i+BATCH_SIZE]

#             batch_X, batch_y = batch_X.to(device), batch_y.to(device)

#             net.zero_grad()
#             outputs = net(batch_X)

#             matches  = [torch.argmax(i)==torch.argmax(j) for i, j in zip(outputs, batch_y)]
#             in_sample_acc = matches.count(True)/len(matches)

#             loss = loss_function(outputs, batch_y)
#             loss.backward()
#             optimizer.step()
#         print(loss)
#         print("In-sample acc:",round(in_sample_acc, 2))

# train(net)

def fwd_pass(X, y, train = False): 
# Not update the weights because it is easy to cheat a NN unintentionally
# Might train your validation data if forget 
# train = true so that model learns 

  if train:
    net.zero_grad()
  
  outputs = net(X)

  # Wanna know how many are identical
  matches = [torch.argmax(i) == torch.argmax(j) for i, j in zip(outputs, y)]
  # i is outputs (out sample or in sample); j is actuals
  accuracy = matches.count(True)/len(matches)

  loss = loss_function(outputs, y)

  if train:
    loss.backward() #back prop
    optimizer.step() 
  return accuracy, loss

def test(size=32): #how much we wanna test
  
  random_start = np.random.randint(len(test_X) - size)
  X, y = test_X[random_start:random_start+size], test_y[random_start:random_start+size] #up to size (32)
  with torch.no_grad():
    val_acc, val_loss = fwd_pass(X.view(-1, 1, 50, 50).to(device), y.to(device))
  return val_acc, val_loss

val_acc, val_loss = test(size=1000) # limit for size
print(val_acc, val_loss)

import time

MODEL_NAME = f"model-{int(time.time())}"

net = Net().to(device)
optimizer = optim.Adam(net.parameters(), lr=0.001)
loss_function = nn.MSELoss()

# print(MODEL_NAME)

def train():
  BATCH_SIZE = 100 #If got memory error, go with 8 or 16
  EPOCHS = 5

  with open("model.log", "a") as f:
    for epoch in range(EPOCHS):
      for i in tqdm(range(0, len(train_X), BATCH_SIZE)):
        batch_X = train_X[i:i+BATCH_SIZE].view(-1, 1, 50, 50).to(device)
        batch_y = train_y[i:i+BATCH_SIZE].to(device)

        accuracy, loss = fwd_pass(batch_X, batch_y, train=True)

        #start logging data 
        #calculate for every 50 steps
        if i%50 == 0:
          val_acc, val_loss = test(size = 100)
          f.write(f"{MODEL_NAME}, {round(time.time(), 3)}, \
          {round(float(accuracy), 2)}, {round(float(loss), 2)},\
          {round(float(val_acc), 2)}, {round(float(val_loss), 2)} \n")

  print("\n" + MODEL_NAME)


train()

import matplotlib.pyplot as plt
from matplotlib import style

style.use("ggplot")

model_name = "model-1582026440" # grab whichever model name you want here. We could also just reference the MODEL_NAME if you're in a notebook still.


def create_acc_loss_graph(model_name):
  contents = open("model.log", "r").read().split("\n")

  times = []
  accuracies = []
  losses = []
  val_accs = []
  val_losses = []

  for c in contents:
      if model_name in c:
          name, timestamp, acc, loss, val_acc, val_loss = c.split(",")

          times.append(timestamp)
          accuracies.append(acc)
          losses.append(loss)
          val_accs.append(val_acc)
          val_losses.append(val_loss)

  # fig = plt.figure()

  # ax1 = plt.subplot2grid((2,1), (0,0))
  # ax2 = plt.subplot2grid((2,1), (1,0), sharex=ax1)


  # ax1.plot(times, accuracies, label="in_samp_acc")
  # ax1.legend(loc=2)
  # ax2.plot(times,losses, label="in_samp_loss")
  # ax2.legend(loc=2)
  # plt.show()

  times = [float(x) - float(times[0]) for x in times]
  import pandas as pd

  d = {'batch_index': times,
      'train_acc': accuracies,
      'train_loss': losses,
      'test_acc': val_accs, 
      'test_loss': val_losses}

  df = pd.DataFrame(d)

  df['train_acc_avg'] = df['train_acc'].ewm(alpha=.02).mean()  # exponential weighted moving average
  df['test_acc_avg'] = df['test_acc'].ewm(alpha=.02).mean()
  df['train_loss_avg'] = df['train_loss'].ewm(alpha=.02).mean()
  df['test_loss_avg'] = df['test_loss'].ewm(alpha=.02).mean()



  # Then plot using pandas:
  df.plot(x='batch_index', y=['train_acc_avg', 'test_acc_avg'], figsize=(8,4))
  plt.ylabel("Accuracy")
  df.plot(x='batch_index', y=['train_loss_avg', 'test_loss_avg'], figsize=(8,4))
  plt.ylabel("Loss")

  plt.show()

create_acc_loss_graph(model_name)



